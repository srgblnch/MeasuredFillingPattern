#!/usr/bin/env python
# -*- coding:utf-8 -*- 


##############################################################################
## license :
##============================================================================
##
## File :        FillingPatternFCT.py
## 
## Project :     Filling Pattern from the FCT
##
## This file is part of Tango device class.
## 
## Tango is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## Tango is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with Tango.  If not, see <http://www.gnu.org/licenses/>.
## 
##
## $Author :      sblanch$
##
## $Revision :    $
##
## $Date :        $
##
## $HeadUrl :     $
##============================================================================
##            This file is generated by POGO
##    (Program Obviously used to Generate tango Object)
##
##        (c) - Software Engineering Group - ESRF
##############################################################################

"""Device to ..."""

__all__ = ["FillingPatternFCT", "FillingPatternFCTClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(FillingPatternFCT.additionnal_import) ENABLED START -----#


META = u"""
    $URL: https://svn.code.sf.net/p/tango-ds/code/Servers/Calculation/FillingPatternFCT/src/FillingPatternFCT.py $
    $LastChangedBy: sergiblanch $
    $Date: 2012-11-12 13:12:28 +0100 (Mon, 12 Nov 2012) $
    $Rev: 5766 $
    License: GPL3+
    Author: Sergi Blanch
""".encode('latin1')

#----- PROTECTED REGION END -----#	//	FillingPatternFCT.additionnal_import

## Device States Description
## ALARM : 
## OFF : 
## ON : 

class FillingPatternFCT (PyTango.Device_4Impl):

    #--------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(FillingPatternFCT.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	FillingPatternFCT.global_variables

    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        FillingPatternFCT.init_device(self)
        #----- PROTECTED REGION ID(FillingPatternFCT.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(FillingPatternFCT.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_OffsetH_read = 0.0
        self.attr_ScaleH_read = 0.0
        self.attr_StartingPoint_read = 0
        self.attr_Threshold_read = 0.0
        self.attr_TimingTrigger_read = 0
        self.attr_nAcquisitions_read = 0
        self.attr_FilledBunches_read = 0
        self.attr_SpuriousBunches_read = 0
        self.attr_resultingFrequency_read = 0.0
        self.attr_BunchIntensity_read = [0.0]
        self.attr_cyclicBuffer_read = [[0.0]]
        #----- PROTECTED REGION ID(FillingPatternFCT.init_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(FillingPatternFCT.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.always_executed_hook

    #-----------------------------------------------------------------------------
    #    FillingPatternFCT read/write attribute methods
    #-----------------------------------------------------------------------------
    
    def read_OffsetH(self, attr):
        self.debug_stream("In read_OffsetH()")
        #----- PROTECTED REGION ID(FillingPatternFCT.OffsetH_read) ENABLED START -----#
        attr.set_value(self.attr_OffsetH_read)
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.OffsetH_read
        
    def write_OffsetH(self, attr):
        self.debug_stream("In write_OffsetH()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(FillingPatternFCT.OffsetH_write) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.OffsetH_write
        
    def read_ScaleH(self, attr):
        self.debug_stream("In read_ScaleH()")
        #----- PROTECTED REGION ID(FillingPatternFCT.ScaleH_read) ENABLED START -----#
        attr.set_value(self.attr_ScaleH_read)
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.ScaleH_read
        
    def write_ScaleH(self, attr):
        self.debug_stream("In write_ScaleH()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(FillingPatternFCT.ScaleH_write) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.ScaleH_write
        
    def read_StartingPoint(self, attr):
        self.debug_stream("In read_StartingPoint()")
        #----- PROTECTED REGION ID(FillingPatternFCT.StartingPoint_read) ENABLED START -----#
        attr.set_value(self.attr_StartingPoint_read)
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.StartingPoint_read
        
    def write_StartingPoint(self, attr):
        self.debug_stream("In write_StartingPoint()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(FillingPatternFCT.StartingPoint_write) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.StartingPoint_write
        
    def read_Threshold(self, attr):
        self.debug_stream("In read_Threshold()")
        #----- PROTECTED REGION ID(FillingPatternFCT.Threshold_read) ENABLED START -----#
        attr.set_value(self.attr_Threshold_read)
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.Threshold_read
        
    def write_Threshold(self, attr):
        self.debug_stream("In write_Threshold()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(FillingPatternFCT.Threshold_write) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.Threshold_write
        
    def read_TimingTrigger(self, attr):
        self.debug_stream("In read_TimingTrigger()")
        #----- PROTECTED REGION ID(FillingPatternFCT.TimingTrigger_read) ENABLED START -----#
        attr.set_value(self.attr_TimmingTrigger_read)
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.TimingTrigger_read
        
    def write_TimingTrigger(self, attr):
        self.debug_stream("In write_TimingTrigger()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(FillingPatternFCT.TimingTrigger_write) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.TimingTrigger_write
        
    def read_nAcquisitions(self, attr):
        self.debug_stream("In read_nAcquisitions()")
        #----- PROTECTED REGION ID(FillingPatternFCT.nAcquisitions_read) ENABLED START -----#
        attr.set_value(self.attr_nAcquisitions_read)
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.nAcquisitions_read
        
    def write_nAcquisitions(self, attr):
        self.debug_stream("In write_nAcquisitions()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(FillingPatternFCT.nAcquisitions_write) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.nAcquisitions_write
        
    def read_FilledBunches(self, attr):
        self.debug_stream("In read_FilledBunches()")
        #----- PROTECTED REGION ID(FillingPatternFCT.FilledBunches_read) ENABLED START -----#
        attr.set_value(self.attr_FilledBunches_read)
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.FilledBunches_read
        
    def read_SpuriousBunches(self, attr):
        self.debug_stream("In read_SpuriousBunches()")
        #----- PROTECTED REGION ID(FillingPatternFCT.SpuriousBunches_read) ENABLED START -----#
        attr.set_value(self.attr_SpuriousBunches_read)
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.SpuriousBunches_read
        
    def read_resultingFrequency(self, attr):
        self.debug_stream("In read_resultingFrequency()")
        #----- PROTECTED REGION ID(FillingPatternFCT.resultingFrequency_read) ENABLED START -----#
        attr.set_value(self.attr_resultingFrequency_read)
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.resultingFrequency_read
        
    def read_BunchIntensity(self, attr):
        self.debug_stream("In read_BunchIntensity()")
        #----- PROTECTED REGION ID(FillingPatternFCT.BunchIntensity_read) ENABLED START -----#
        attr.set_value(self.attr_BunchIntensity_read)
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.BunchIntensity_read
        
    def read_cyclicBuffer(self, attr):
        self.debug_stream("In read_cyclicBuffer()")
        #----- PROTECTED REGION ID(FillingPatternFCT.cyclicBuffer_read) ENABLED START -----#
        attr.set_value(self.attr_cyclicBuffer_read)
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.cyclicBuffer_read
        
    
    
        #----- PROTECTED REGION ID(FillingPatternFCT.initialize_dynamic_attributes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.initialize_dynamic_attributes
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(FillingPatternFCT.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.read_attr_hardware


    #-----------------------------------------------------------------------------
    #    FillingPatternFCT command methods
    #-----------------------------------------------------------------------------
    
    def Start(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In Start()")
        #----- PROTECTED REGION ID(FillingPatternFCT.Start) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.Start
        
    def Stop(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In Stop()")
        #----- PROTECTED REGION ID(FillingPatternFCT.Stop) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.Stop
        

class FillingPatternFCTClass(PyTango.DeviceClass):
    #--------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(FillingPatternFCT.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	FillingPatternFCT.global_class_variables

    def dyn_attr(self, dev_list):
        """Invoked to create dynamic attributes for the given devices.
        Default implementation calls
        :meth:`FillingPatternFCT.initialize_dynamic_attributes` for each device
    
        :param dev_list: list of devices
        :type dev_list: :class:`PyTango.DeviceImpl`"""
    
        for dev in dev_list:
            try:
                dev.initialize_dynamic_attributes()
            except:
                import traceback
                dev.warn_stream("Failed to initialize dynamic attributes")
                dev.debug_stream("Details: " + traceback.format_exc())
        #----- PROTECTED REGION ID(FillingPatternFCT.dyn_attr) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FillingPatternFCT.dyn_attr

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'eventReceiverDevice':
            [PyTango.DevString,
            [] ],
        'FCTAttribute':
            [PyTango.DevString,
            "Channel of the scope from where the readings are get",
            [] ],
        'scopeDevice':
            [PyTango.DevString,
            [] ],
        }


    #    Command definitions
    cmd_list = {
        'Start':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Stop':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'OffsetH':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "s",
                'description': "Oscilloscope Horizontal Offset",
                'Display level': PyTango.DispLevel.EXPERT,
                'Memorized':"true"
            } ],
        'ScaleH':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "s/div",
                'description': "Oscilloscope Horizontal Scale",
                'Display level': PyTango.DispLevel.EXPERT,
                'Memorized':"true"
            } ],
        'StartingPoint':
            [[PyTango.DevLong64,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Display level': PyTango.DispLevel.EXPERT,
                'Memorized':"true_without_hard_applied"
            } ],
        'Threshold':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "%",
                'max value': "100",
                'min value': "0",
                'Memorized':"true_without_hard_applied"
            } ],
        'TimingTrigger':
            [[PyTango.DevULong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "ticks",
                'Display level': PyTango.DispLevel.EXPERT,
                'Memorized':"true_without_hard_applied"
            } ],
        'nAcquisitions':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description': "Number of elements in the cyclic buffer from where the calculation takes the data.",
                'Memorized':"true_without_hard_applied"
            } ],
        'FilledBunches':
            [[PyTango.DevULong,
            PyTango.SCALAR,
            PyTango.READ]],
        'SpuriousBunches':
            [[PyTango.DevULong,
            PyTango.SCALAR,
            PyTango.READ]],
        'resultingFrequency':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "Hz",
                'description': "Expert attribute to read the frequency with this device is pushing results in the output",
                'Display level': PyTango.DispLevel.EXPERT,
            } ],
        'BunchIntensity':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 500]],
        'cyclicBuffer':
            [[PyTango.DevDouble,
            PyTango.IMAGE,
            PyTango.READ, 40000, 50],
            {
                'description': "Expert attribute to be able to check the cyclic buffer evolution",
                'Display level': PyTango.DispLevel.EXPERT,
            } ],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(FillingPatternFCTClass,FillingPatternFCT,'FillingPatternFCT')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e

if __name__ == '__main__':
    main()
