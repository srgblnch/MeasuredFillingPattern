#!/usr/bin/env python
# -*- coding:utf-8 -*- 


##############################################################################
## license :
##============================================================================
##
## File :        MeasuredFillingPatternPhCt.py
## 
## Project :     Measured Filling Pattern from a Photon Counter
##
## $Author :      sblanch$
##
## $Revision :    $
##
## $Date :        $
##
## $HeadUrl :     $
##============================================================================
##            This file is generated by POGO
##    (Program Obviously used to Generate tango Object)
##
##        (c) - Software Engineering Group - ESRF
##############################################################################

"""Device to ..."""

__all__ = ["MeasuredFillingPatternPhCt", "MeasuredFillingPatternPhCtClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(MeasuredFillingPatternPhCt.additionnal_import) ENABLED START -----#

#----- PROTECTED REGION END -----#	//	MeasuredFillingPatternPhCt.additionnal_import

##############################################################################
## Device States Description
##
## ALARM : Check the status, something is not running as expected, but the calculations are still alive.
## OFF : The device is alive, but is not reading anything, neither doing any calculation
## ON : Device is doing the calculation normally
## STANDBY : The calculation have start, but not with the expected #samples in the cyclic buffer 
## FAULT : Something out of the specs, calculation stopped. Check the status.
## INIT : Just when the device is launched until its build procedure is done
##############################################################################

class MeasuredFillingPatternPhCt (PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------
#----- PROTECTED REGION ID(MeasuredFillingPatternPhCt.global_variables) ENABLED START -----#

#----- PROTECTED REGION END -----#	//	MeasuredFillingPatternPhCt.global_variables
#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In " + self.get_name() + ".__init__()")
        MeasuredFillingPatternPhCt.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        self.debug_stream("In " + self.get_name() + ".delete_device()")
        #----- PROTECTED REGION ID(MeasuredFillingPatternPhCt.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MeasuredFillingPatternPhCt.delete_device

#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        self.debug_stream("In " + self.get_name() + ".init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_BunchIntensity_read = [0.0]
        #----- PROTECTED REGION ID(MeasuredFillingPatternPhCt.init_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MeasuredFillingPatternPhCt.init_device

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        self.debug_stream("In " + self.get_name() + ".always_excuted_hook()")
        #----- PROTECTED REGION ID(MeasuredFillingPatternPhCt.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MeasuredFillingPatternPhCt.always_executed_hook

#==================================================================
#
#    MeasuredFillingPatternPhCt read/write attribute methods
#
#==================================================================

#------------------------------------------------------------------
#    Read BunchIntensity attribute
#------------------------------------------------------------------
    def read_BunchIntensity(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_BunchIntensity()")
        #----- PROTECTED REGION ID(MeasuredFillingPatternPhCt.BunchIntensity_read) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MeasuredFillingPatternPhCt.BunchIntensity_read
        attr.set_value(self.attr_BunchIntensity_read)
        



#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self, data):
        self.debug_stream("In " + self.get_name() + ".read_attr_hardware()")
        #----- PROTECTED REGION ID(MeasuredFillingPatternPhCt.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MeasuredFillingPatternPhCt.read_attr_hardware


#==================================================================
#
#    MeasuredFillingPatternPhCt command methods
#
#==================================================================

#------------------------------------------------------------------
#    Start command:
#------------------------------------------------------------------
    def Start(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In " + self.get_name() +  ".Start()")
        #----- PROTECTED REGION ID(MeasuredFillingPatternPhCt.Start) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MeasuredFillingPatternPhCt.Start
        
#------------------------------------------------------------------
#    Stop command:
#------------------------------------------------------------------
    def Stop(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In " + self.get_name() +  ".Stop()")
        #----- PROTECTED REGION ID(MeasuredFillingPatternPhCt.Stop) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MeasuredFillingPatternPhCt.Stop
        
#------------------------------------------------------------------
#    Exec command:
#------------------------------------------------------------------
    def Exec(self, argin):
        """ 
        
        :param argin: statement to executed
        :type: PyTango.DevString
        :return: result
        :rtype: PyTango.DevString """
        self.debug_stream("In " + self.get_name() +  ".Exec()")
        argout = ''
        #----- PROTECTED REGION ID(MeasuredFillingPatternPhCt.Exec) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MeasuredFillingPatternPhCt.Exec
        return argout
        

#==================================================================
#
#    MeasuredFillingPatternPhCtClass class definition
#
#==================================================================
class MeasuredFillingPatternPhCtClass(PyTango.DeviceClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'PhCtDev':
            [PyTango.DevString,
            "Photon Counter device name",
            [] ],
        }


    #    Command definitions
    cmd_list = {
        'Start':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Stop':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Exec':
            [[PyTango.DevString, "statement to executed"],
            [PyTango.DevString, "result"],
            {
                'Display level': PyTango.DispLevel.EXPERT,
            } ],
        }


    #    Attribute definitions
    attr_list = {
        'BunchIntensity':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 5000]],
        }


#------------------------------------------------------------------
#    MeasuredFillingPatternPhCtClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In MeasuredFillingPatternPhCt Class  constructor"

#==================================================================
#
#    MeasuredFillingPatternPhCt class main method
#
#==================================================================
def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(MeasuredFillingPatternPhCtClass,MeasuredFillingPatternPhCt,'MeasuredFillingPatternPhCt')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e

if __name__ == '__main__':
    main()
